// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/customer_model.dart';
import 'data/models/points_model.dart';
import 'data/models/reward_model.dart';
import 'data/models/stamp_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3401710457310357716),
      name: 'RewardModel',
      lastPropertyId: const obx_int.IdUid(12, 5095615782389340426),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7595346860182445469),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1315264941201472981),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4156855547960980391),
            name: 'discountValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6119365577983705815),
            name: 'discountValueType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7333605600765203908),
            name: 'item',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 9193741409764690578),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 482995528713180466),
            name: 'rewardCost',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4538394185443530244),
            name: 'minimumPurchase',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7190404437975898656),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 8670166263391842496)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 9111147930762667052),
            name: 'pointsProgramId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 3842039719501598814),
            relationTarget: 'PointsModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5095615782389340426),
            name: 'stampProgramId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 4043233121981302571),
            relationTarget: 'StampModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 12435688903466140),
      name: 'CustomerModel',
      lastPropertyId: const obx_int.IdUid(5, 8073404252985355084),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1542532643528651518),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2340145866410014569),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(4, 5064043649769193035)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3524937022293858320),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 10449065858544969),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8073404252985355084),
            name: 'email',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 7940335822263021417),
            name: 'pointsPrograms',
            targetId: const obx_int.IdUid(4, 7344921886123381777)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 5371440725444001829),
            name: 'stampPrograms',
            targetId: const obx_int.IdUid(5, 6685464445707830496))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 7344921886123381777),
      name: 'PointsModel',
      lastPropertyId: const obx_int.IdUid(7, 8399627070114772951),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8156887839954770586),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5157720441148261386),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(5, 6691712950610642240)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1495667634021040905),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 38712837054418215),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2297099000378969825),
            name: 'points',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1840965130373951759),
            name: 'minimumSpent',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8399627070114772951),
            name: 'currencyCode',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'rewards',
            srcEntity: 'RewardModel',
            srcField: 'pointsProgram'),
        obx_int.ModelBacklink(
            name: 'customers',
            srcEntity: 'CustomerModel',
            srcField: 'pointsPrograms')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 6685464445707830496),
      name: 'StampModel',
      lastPropertyId: const obx_int.IdUid(6, 2898450460488718427),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1894107812119558610),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5038353275190053216),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(6, 78064764068026973)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1883586170591108454),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6837325332857488867),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 882232257323069456),
            name: 'numberHoles',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2898450460488718427),
            name: 'winningNumbers',
            type: 24,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'rewards',
            srcEntity: 'RewardModel',
            srcField: 'stampProgram'),
        obx_int.ModelBacklink(
            name: 'customers',
            srcEntity: 'CustomerModel',
            srcField: 'stampPrograms')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 6685464445707830496),
      lastIndexId: const obx_int.IdUid(8, 4043233121981302571),
      lastRelationId: const obx_int.IdUid(3, 5371440725444001829),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [1173935753394898722],
      retiredIndexUids: const [5939902998660536462],
      retiredPropertyUids: const [
        5774164378543038065,
        6716148227055326269,
        1743111344690139695,
        165063373242491864,
        544434251751493668,
        7118891231732692149,
        3007625745844823324,
        2241679788063526819
      ],
      retiredRelationUids: const [8726568091037055140],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    RewardModel: obx_int.EntityDefinition<RewardModel>(
        model: _entities[0],
        toOneRelations: (RewardModel object) =>
            [object.pointsProgram, object.stampProgram],
        toManyRelations: (RewardModel object) => {},
        getId: (RewardModel object) => object.id,
        setId: (RewardModel object, int id) {
          object.id = id;
        },
        objectToFB: (RewardModel object, fb.Builder fbb) {
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final discountValueTypeOffset = object.discountValueType == null
              ? null
              : fbb.writeString(object.discountValueType!);
          final itemOffset =
              object.item == null ? null : fbb.writeString(object.item!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeOffset);
          fbb.addInt64(2, object.discountValue);
          fbb.addOffset(3, discountValueTypeOffset);
          fbb.addOffset(4, itemOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addInt64(6, object.rewardCost);
          fbb.addInt64(7, object.minimumPurchase);
          fbb.addOffset(8, uidOffset);
          fbb.addInt64(10, object.pointsProgram.targetId);
          fbb.addInt64(11, object.stampProgram.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final discountValueParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final discountValueTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final itemParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final rewardCostParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final minimumPurchaseParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final object = RewardModel(
              id: idParam,
              uid: uidParam,
              type: typeParam,
              discountValue: discountValueParam,
              discountValueType: discountValueTypeParam,
              item: itemParam,
              description: descriptionParam,
              rewardCost: rewardCostParam,
              minimumPurchase: minimumPurchaseParam);
          object.pointsProgram.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.pointsProgram.attach(store);
          object.stampProgram.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.stampProgram.attach(store);
          return object;
        }),
    CustomerModel: obx_int.EntityDefinition<CustomerModel>(
        model: _entities[1],
        toOneRelations: (CustomerModel object) => [],
        toManyRelations: (CustomerModel object) => {
              obx_int.RelInfo<CustomerModel>.toMany(2, object.id!):
                  object.pointsPrograms,
              obx_int.RelInfo<CustomerModel>.toMany(3, object.id!):
                  object.stampPrograms
            },
        getId: (CustomerModel object) => object.id,
        setId: (CustomerModel object, int id) {
          object.id = id;
        },
        objectToFB: (CustomerModel object, fb.Builder fbb) {
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, emailOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = CustomerModel(
              id: idParam,
              uid: uidParam,
              name: nameParam,
              phone: phoneParam,
              email: emailParam);
          obx_int.InternalToManyAccess.setRelInfo<CustomerModel>(
              object.pointsPrograms,
              store,
              obx_int.RelInfo<CustomerModel>.toMany(2, object.id!));
          obx_int.InternalToManyAccess.setRelInfo<CustomerModel>(
              object.stampPrograms,
              store,
              obx_int.RelInfo<CustomerModel>.toMany(3, object.id!));
          return object;
        }),
    PointsModel: obx_int.EntityDefinition<PointsModel>(
        model: _entities[2],
        toOneRelations: (PointsModel object) => [],
        toManyRelations: (PointsModel object) => {
              obx_int.RelInfo<RewardModel>.toOneBacklink(11, object.id!,
                      (RewardModel srcObject) => srcObject.pointsProgram):
                  object.rewards,
              obx_int.RelInfo<CustomerModel>.toManyBacklink(2, object.id!):
                  object.customers
            },
        getId: (PointsModel object) => object.id,
        setId: (PointsModel object, int id) {
          object.id = id;
        },
        objectToFB: (PointsModel object, fb.Builder fbb) {
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          final typeOffset = fbb.writeString(object.type);
          final nameOffset = fbb.writeString(object.name);
          final currencyCodeOffset = fbb.writeString(object.currencyCode);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addFloat64(4, object.points);
          fbb.addFloat64(5, object.minimumSpent);
          fbb.addOffset(6, currencyCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final pointsParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final minimumSpentParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final currencyCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final object = PointsModel(
              id: idParam,
              uid: uidParam,
              type: typeParam,
              name: nameParam,
              points: pointsParam,
              minimumSpent: minimumSpentParam,
              currencyCode: currencyCodeParam);
          obx_int.InternalToManyAccess.setRelInfo<PointsModel>(
              object.rewards,
              store,
              obx_int.RelInfo<RewardModel>.toOneBacklink(11, object.id!,
                  (RewardModel srcObject) => srcObject.pointsProgram));
          obx_int.InternalToManyAccess.setRelInfo<PointsModel>(
              object.customers,
              store,
              obx_int.RelInfo<CustomerModel>.toManyBacklink(2, object.id!));
          return object;
        }),
    StampModel: obx_int.EntityDefinition<StampModel>(
        model: _entities[3],
        toOneRelations: (StampModel object) => [],
        toManyRelations: (StampModel object) => {
              obx_int.RelInfo<RewardModel>.toOneBacklink(12, object.id!,
                      (RewardModel srcObject) => srcObject.stampProgram):
                  object.rewards,
              obx_int.RelInfo<CustomerModel>.toManyBacklink(3, object.id!):
                  object.customers
            },
        getId: (StampModel object) => object.id,
        setId: (StampModel object, int id) {
          object.id = id;
        },
        objectToFB: (StampModel object, fb.Builder fbb) {
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final winningNumbersOffset = object.winningNumbers == null
              ? null
              : fbb.writeListInt16(object.winningNumbers!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.numberHoles);
          fbb.addOffset(5, winningNumbersOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final numberHolesParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final winningNumbersParam =
              const fb.ListReader<int>(fb.Int16Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = StampModel(
              id: idParam,
              uid: uidParam,
              type: typeParam,
              name: nameParam,
              numberHoles: numberHolesParam,
              winningNumbers: winningNumbersParam);
          obx_int.InternalToManyAccess.setRelInfo<StampModel>(
              object.rewards,
              store,
              obx_int.RelInfo<RewardModel>.toOneBacklink(12, object.id!,
                  (RewardModel srcObject) => srcObject.stampProgram));
          obx_int.InternalToManyAccess.setRelInfo<StampModel>(
              object.customers,
              store,
              obx_int.RelInfo<CustomerModel>.toManyBacklink(3, object.id!));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [RewardModel] entity fields to define ObjectBox queries.
class RewardModel_ {
  /// See [RewardModel.id].
  static final id =
      obx.QueryIntegerProperty<RewardModel>(_entities[0].properties[0]);

  /// See [RewardModel.type].
  static final type =
      obx.QueryStringProperty<RewardModel>(_entities[0].properties[1]);

  /// See [RewardModel.discountValue].
  static final discountValue =
      obx.QueryIntegerProperty<RewardModel>(_entities[0].properties[2]);

  /// See [RewardModel.discountValueType].
  static final discountValueType =
      obx.QueryStringProperty<RewardModel>(_entities[0].properties[3]);

  /// See [RewardModel.item].
  static final item =
      obx.QueryStringProperty<RewardModel>(_entities[0].properties[4]);

  /// See [RewardModel.description].
  static final description =
      obx.QueryStringProperty<RewardModel>(_entities[0].properties[5]);

  /// See [RewardModel.rewardCost].
  static final rewardCost =
      obx.QueryIntegerProperty<RewardModel>(_entities[0].properties[6]);

  /// See [RewardModel.minimumPurchase].
  static final minimumPurchase =
      obx.QueryIntegerProperty<RewardModel>(_entities[0].properties[7]);

  /// See [RewardModel.uid].
  static final uid =
      obx.QueryStringProperty<RewardModel>(_entities[0].properties[8]);

  /// See [RewardModel.pointsProgram].
  static final pointsProgram = obx.QueryRelationToOne<RewardModel, PointsModel>(
      _entities[0].properties[9]);

  /// See [RewardModel.stampProgram].
  static final stampProgram = obx.QueryRelationToOne<RewardModel, StampModel>(
      _entities[0].properties[10]);
}

/// [CustomerModel] entity fields to define ObjectBox queries.
class CustomerModel_ {
  /// See [CustomerModel.id].
  static final id =
      obx.QueryIntegerProperty<CustomerModel>(_entities[1].properties[0]);

  /// See [CustomerModel.uid].
  static final uid =
      obx.QueryStringProperty<CustomerModel>(_entities[1].properties[1]);

  /// See [CustomerModel.name].
  static final name =
      obx.QueryStringProperty<CustomerModel>(_entities[1].properties[2]);

  /// See [CustomerModel.phone].
  static final phone =
      obx.QueryStringProperty<CustomerModel>(_entities[1].properties[3]);

  /// See [CustomerModel.email].
  static final email =
      obx.QueryStringProperty<CustomerModel>(_entities[1].properties[4]);

  /// see [CustomerModel.pointsPrograms]
  static final pointsPrograms =
      obx.QueryRelationToMany<CustomerModel, PointsModel>(
          _entities[1].relations[0]);

  /// see [CustomerModel.stampPrograms]
  static final stampPrograms =
      obx.QueryRelationToMany<CustomerModel, StampModel>(
          _entities[1].relations[1]);
}

/// [PointsModel] entity fields to define ObjectBox queries.
class PointsModel_ {
  /// See [PointsModel.id].
  static final id =
      obx.QueryIntegerProperty<PointsModel>(_entities[2].properties[0]);

  /// See [PointsModel.uid].
  static final uid =
      obx.QueryStringProperty<PointsModel>(_entities[2].properties[1]);

  /// See [PointsModel.type].
  static final type =
      obx.QueryStringProperty<PointsModel>(_entities[2].properties[2]);

  /// See [PointsModel.name].
  static final name =
      obx.QueryStringProperty<PointsModel>(_entities[2].properties[3]);

  /// See [PointsModel.points].
  static final points =
      obx.QueryDoubleProperty<PointsModel>(_entities[2].properties[4]);

  /// See [PointsModel.minimumSpent].
  static final minimumSpent =
      obx.QueryDoubleProperty<PointsModel>(_entities[2].properties[5]);

  /// See [PointsModel.currencyCode].
  static final currencyCode =
      obx.QueryStringProperty<PointsModel>(_entities[2].properties[6]);

  /// see [PointsModel.rewards]
  static final rewards = obx.QueryBacklinkToMany<RewardModel, PointsModel>(
      RewardModel_.pointsProgram);
}

/// [StampModel] entity fields to define ObjectBox queries.
class StampModel_ {
  /// See [StampModel.id].
  static final id =
      obx.QueryIntegerProperty<StampModel>(_entities[3].properties[0]);

  /// See [StampModel.uid].
  static final uid =
      obx.QueryStringProperty<StampModel>(_entities[3].properties[1]);

  /// See [StampModel.type].
  static final type =
      obx.QueryStringProperty<StampModel>(_entities[3].properties[2]);

  /// See [StampModel.name].
  static final name =
      obx.QueryStringProperty<StampModel>(_entities[3].properties[3]);

  /// See [StampModel.numberHoles].
  static final numberHoles =
      obx.QueryIntegerProperty<StampModel>(_entities[3].properties[4]);

  /// See [StampModel.winningNumbers].
  static final winningNumbers =
      obx.QueryIntegerVectorProperty<StampModel>(_entities[3].properties[5]);

  /// see [StampModel.rewards]
  static final rewards = obx.QueryBacklinkToMany<RewardModel, StampModel>(
      RewardModel_.stampProgram);
}
